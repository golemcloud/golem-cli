# List of top-level tasks intended for use:
#
# - `cargo make dev-flow` or just `cargo make`: runs a full development flow, including fixing format and clippy, building and running tests
# - `cargo make build`: builds everything in debug mode
# - `cargo make build-release`: builds everything in release mode. customizable with PLATFORM_OVERRIDE env variable for docker builds
# - `cargo make check`: runs rustfmt and clippy checks without applying any fix
# - `cargo make fix`: runs rustfmt and clippy checks and applies fixes
# - `cargo make test`: runs all tests
# - `cargo make unit-tests`: runs all unit tests
# - `cargo make integrations-tests`: runs all integrations tests
# - `cargo make cli-integrations-tests`: runs cli integrations tests only
# - `cargo make stubgen-integrations-tests`: runs stubgen integrations tests only
# - `cargo make template-integration-tests`: runs template tests only
# - `cargo make publish`: publishes packages to crates.io
# - `cargo make desktop`: builds the desktop application
# - `cargo make dev-desktop`: run the desktop application

[config]
default_to_workspace = false # by default, we run cargo commands on top level instead of per member
skip_core_tasks = true       # we are not using the predefined cargo-make flows, instead redefine here for more clarity

[env]
JUNIT_OPTS = ""

[env.ci]
CARGO_INCREMENTAL = "false"
JUNIT_OPTS = "--format junit --logfile target/report.xml"

[tasks.default]
description = "This is the task that gets executed by 'cargo make' when no task is specified"
run_task = "dev-flow"

[tasks.dev]
description = "Alias to the dev-flow task"
alias = "dev-flow"

[tasks.dev-flow]
description = "Runs a full development flow, including fixing format and clippy, building and running tests"
dependencies = [
    "fix",
    "check",
    "build",
    "test"
]

[tasks.build]
description = "Builds everything in debug mode"
command = "cargo"
args = ["build", "--workspace", "--all-targets"]

[tasks.build-release]
description = """Builds everything in release mode"""
dependencies = ["set-version"]
command = "cargo"
args = ["build", "--release"]

## ** CHECK **

[tasks.check]
description = "Runs rustfmt and clippy checks without applying any fix"
dependencies = ["check-clippy", "check-rustfmt"]

[tasks.check-rustfmt]
description = "Runs rustfmt checks without applying any fix"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all", "--", "--check"]

[tasks.check-clippy]
description = "Runs clippy checks without applying any fix"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--all-targets", "--", "--no-deps", "-Dwarnings"]

## ** FIX **

[tasks.fix]
description = "Runs rustfmt and clippy checks and applies fixes"
dependencies = ["fix-clippy", "fix-rustfmt"]

[tasks.fix-rustfmt]
description = "Runs rustfmt checks and applies fixes"
install_crate = "rustfmt"
command = "cargo"
args = ["fmt", "--all"]

[tasks.fix-clippy]
description = "Runs clippy checks and applies fixes"
install_crate = "clippy"
command = "cargo"
args = ["clippy", "--fix", "--allow-dirty", "--allow-staged", "--", "--no-deps", "-Dwarnings"]

## ** INSTALL **
[tasks.install]
dependencies = ["install-golem-cli", "install-golem"]

[tasks.install-golem-cli]
description = "Install golem-cli"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo install --path golem-cli --bin golem-cli --target-dir target --locked --offline
'''

[tasks.install-golem]
description = "Install golem"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo install --path golem --bin golem --target-dir target --locked --offline
'''

## ** TEST **
[tasks.test]
dependencies = ["unit-tests", "integration-tests"]

[tasks.unit-tests]
description = "Run unit tests"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo test --workspace --lib --all-features -- --nocapture --report-time %{JUNIT_OPTS}
'''

[tasks.integration-tests]
description = "Run integration tests"
dependencies = ["cli-integration-tests", "stubgen-integration-tests", "template-integration-tests"]

[tasks.cli-integration-tests]
description = "Run CLI integration tests"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo test --package golem-cli --test integration -- --nocapture --test-threads=1 --report-time %{JUNIT_OPTS}
'''

[tasks.stubgen-integration-tests]
description = "Run stubgen integration tests"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo test --package golem-wasm-rpc-stubgen :tag: --test integration -- --nocapture --report-time %{JUNIT_OPTS}
exec --fail-on-error cargo test --package golem-wasm-rpc-stubgen :tag:uses_cargo --test integration -- --nocapture --test-threads=1 --report-time %{JUNIT_OPTS}
'''

[tasks.template-integration-tests]
dependencies = ["install-golem-cli"]
description = "Run template integration tests"
script_runner = "@duckscript"
script = '''
exec --fail-on-error cargo test --package golem-templates --test integration -- --nocapture --test-threads=1 --report-time %{JUNIT_OPTS}
'''

## ** Single executable **
[tasks.build-se]
private = true
description = """Build the single executable in debug mode"""
dependencies = ["set-version"]
command = "cargo"
args = ["build", "-p", "golem"]

[tasks.run-se]
description = """Build the single executable in debug mode"""
dependencies = ["build-se"]
command = "./target/debug/golem"
args = [  "server", "run", "--clean", "--data-dir", ".golem/se-data" ]

## ** DESKTOP APP **
[tasks.desktop]
description = "Builds the desktop application"
dependencies = ["npm-install"]
command = "npm"
args = ["run", "tauri", "build"]
cwd = "./desktop-app"

[tasks.dev-desktop]
description = "Run the desktop application"
dependencies = ["npm-install"]
command = "npm"
args = ["run", "tauri", "dev"]
cwd = "./desktop-app"

[tasks.npm-install]
description = "Install npm dependencies"
command = "npm"
args = ["install"]
cwd = "./desktop-app"

## Publishing
[tasks.set-version]
description = "Sets the version in all Cargo.toml files to the value of the VERSION environment variable"
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include 'Cargo.toml' '0\.0\.0' | xargs sed -i "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.mac]
condition = { env_set = ["VERSION"] }
script = '''
grep -rl --include '.*Cargo\.toml' '0\.0\.0' | xargs sed -i "" "s/0\.0\.0/${VERSION}/g"
'''

[tasks.set-version.windows]
script_runner = "powershell"
script_extension = "ps1"
condition = { env_set = ["VERSION"] }
script = '''
$cargoFiles = Get-ChildItem . Cargo.toml -rec
foreach ($file in $cargoFiles)
{
    (Get-Content $file.PSPath) |
    Foreach-Object { $_ -replace "0.0.0", $Env:VERSION } |
    Set-Content $file.PSPath
}
'''

[tasks.publish]
description = "Publishes packages to crates.io"
dependencies = [
    "build-release",
    "publish-golem-cli",
]

[tasks.publish-golem-templates]
description = "Publishes golem-templates package to crates.io"
command = "cargo"
args = [
    "publish",
    "-p",
    "golem-templates",
    "--all-features",
    "--allow-dirty",
    "--no-verify",
]

[tasks.publish-golem-cli]
description = "Publishes golem-wasm-ast package to crates.io"
dependencies = ["publish-golem-templates"]
command = "cargo"
args = [
    "publish",
    "-p",
    "golem-cli",
    "--all-features",
    "--allow-dirty",
    "--no-verify",
]
